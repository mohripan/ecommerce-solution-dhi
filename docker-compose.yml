version: '3.8'
services:
  userservice:
    build:
      context: ./Server/UserService
      dockerfile: Dockerfile
    ports:
      - "5000:8080"
    networks:
      - app-network
    environment:
      - ConnectionStrings__UserDatabase=Server=sqlserver,1433;Database=UserServiceDb;User Id=sa;Password=p@ssw0rd12345678;Encrypt=False
    profiles:
      - production
      - testing

  discoveryservice:
    build:
      context: ./Server/DiscoveryService
      dockerfile: Dockerfile
    ports:
      - "5001:8080"
    depends_on:
      - userservice
    networks:
      - app-network
    environment:
      - UserService__BaseUrl=http://userservice:8080
    profiles:
      - production

  productservice:
    build:
      context: ./Server/ProductService
      dockerfile: Dockerfile
    ports:
      - "5002:8080"
    depends_on:
      - discoveryservice
      - mysql
    networks:
      - app-network
    environment:
      - ConnectionStrings__ProductDatabase=Server=mysql;Database=ProductServiceDb;User=root;Password=my-secret-pw
      - DiscoveryService__BaseUrl=http://discoveryservice:8080
    profiles:
      - production
  
  sqlserver:
    image: mcr.microsoft.com/mssql/server:2022-latest
    container_name: sqlserver
    environment:
      ACCEPT_EULA: "Y"
      SA_PASSWORD: "p@ssw0rd12345678"
      MSSQL_PID: "Developer"
      MSSQL_AGENT_ENABLED: "true"
    ports:
      - "1433:1433"
    volumes:
      - sqlserver-data:/var/opt/mssql
    healthcheck:
      test: ["CMD", "/opt/mssql-tools/bin/sqlcmd", "-S", "localhost", "-U", "sa", "-P", "p@ssw0rd12345678", "-Q", "SELECT 1"]
      interval: 10s
      retries: 5
    networks:
      - app-network

  mysql:
    image: mysql:8.0
    container_name: mysql
    environment:
      MYSQL_ROOT_PASSWORD: p@ssw0rd12345678
      MYSQL_DATABASE: ProductServiceDb
    ports:
      - "3306:3306"
    volumes:
      - mysql-data:/var/lib/mysql
    networks:
      - app-network

  userservicetests:
    build:
      context: ./Server/UserService
      dockerfile: Dockerfile.test
    depends_on:
      - sqlserver
    volumes:
      - coverage-vol:/TestCoverage
      - ./TestResults:/TestResults
    networks:
      - app-network
    profiles:
      - testing

  discoveryservicetests:
    build:
      context: ./Server/DiscoveryService
      dockerfile: Dockerfile.test
    depends_on:
      - userservice
    volumes:
      - coverage-vol:/TestCoverage
      - ./TestResults:/TestResults
    networks:
      - app-network
    profiles:
      - testing

  productservicetests:
    build:
      context: ./Server/ProductService
      dockerfile: Dockerfile.test
    depends_on:
      - mysql
      - discoveryservice
    volumes:
      - coverage-vol:/TestCoverage
      - ./TestResults:/TestResults
    networks:
      - app-network
    profiles:
      - testing

networks:
  app-network:

volumes:
  sqlserver-data:
  mysql-data:
  coverage-vol: